#include <LedControl.h>
#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <time.h>

const char *ssid = "SSID";
const char *password = "PASS";

// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

//Week Days
String weekDays[7] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

unsigned long time1 = 0;
int MaxDevice = 4;
int Xpixel = 5;
int OnOff = 1;
int MatrixX, MatrixY;
LedControl lc = LedControl(13, 14, 2, MaxDevice);

byte Font[][8] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //32 SPACE
  0x08, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, //33 !
  0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x14, 0x14, //34 "
  0x14, 0x14, 0x7C, 0x14, 0x28, 0x7C, 0x28, 0x28, //35 #
  0x1C, 0x2A, 0x28, 0x28, 0x1C, 0x0A, 0x2A, 0x1C, //36 $
  0x48, 0xA8, 0xB0, 0x50, 0x14, 0x2A, 0x2A, 0x44, //37 %
  0x0C, 0x32, 0x32, 0x2E, 0x08, 0x14, 0x14, 0x08, //38 &
  0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x02, //39 '
  0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, //40 (
  0x02, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x02, //41 )
  0x00, 0x00, 0x00, 0x00, 0x0A, 0x04, 0x0E, 0x04, //42 *
  0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00, //43 +
  0x02, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, //44 ,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, //45 -
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //46 .
  0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, //47 /
  0x06, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x06, //48 0
  0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x06, 0x04, //49 1
  0x0F, 0x01, 0x02, 0x04, 0x08, 0x08, 0x09, 0x06, //50 2
  0x06, 0x09, 0x08, 0x08, 0x06, 0x08, 0x09, 0x06, //51 3
  0x08, 0x08, 0x1F, 0x09, 0x0A, 0x0A, 0x0C, 0x08, //52 4
  0x06, 0x09, 0x08, 0x08, 0x07, 0x01, 0x02, 0x0E, //53 5
  0x06, 0x09, 0x09, 0x0B, 0x05, 0x01, 0x09, 0x06, //54 6
  0x02, 0x02, 0x02, 0x04, 0x04, 0x04, 0x08, 0x0F, //55 7
  0x06, 0x09, 0x09, 0x09, 0x06, 0x09, 0x09, 0x06, //56 8
  0x06, 0x09, 0x08, 0x0A, 0x0D, 0x09, 0x09, 0x06, //57 9
  0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, //58 :
  0x02, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, //59 ;
  0x00, 0x10, 0x0C, 0x02, 0x0C, 0x10, 0x00, 0x00, //60 <
  0x1E, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, //61 =
  0x00, 0x02, 0x0C, 0x10, 0x0C, 0x02, 0x00, 0x00, //62 >
  0x04, 0x00, 0x04, 0x04, 0x08, 0x10, 0x12, 0x0C, //63 ?
  0x82, 0x79, 0xA5, 0xA5, 0xA5, 0xA5, 0xDA, 0x44, //64 @
  0x22, 0x22, 0x1C, 0x14, 0x14, 0x14, 0x14, 0x08, //65 A
  0x1E, 0x22, 0x22, 0x22, 0x1E, 0x22, 0x22, 0x1E, //66 B
  0x38, 0x44, 0x42, 0x02, 0x02, 0x42, 0x44, 0x38, //67 C
  0x0E, 0x12, 0x22, 0x22, 0x22, 0x22, 0x12, 0x0E, //68 D
  0x3E, 0x02, 0x02, 0x02, 0x3E, 0x02, 0x02, 0x3E, //69 E
  0x04, 0x04, 0x04, 0x04, 0x1C, 0x04, 0x04, 0x3C, //70 F
  0x38, 0x44, 0x42, 0x72, 0x02, 0x42, 0x44, 0x38, //71 G
  0x22, 0x22, 0x22, 0x22, 0x3E, 0x22, 0x22, 0x22, //72 H
  0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, //73 I
  0x06, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, //74 J
  0x22, 0x12, 0x12, 0x0A, 0x0E, 0x0A, 0x12, 0x22, //75 K
  0x0F, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, //76 L
  0x49, 0x55, 0x55, 0x55, 0x55, 0x63, 0x63, 0x41, //77 M
  0x84, 0xC4, 0xA4, 0xA4, 0x94, 0x94, 0x8C, 0x84, //78 N
  0x0C, 0x12, 0x21, 0x21, 0x21, 0x21, 0x12, 0x0C, //79 0
  0x01, 0x01, 0x01, 0x0F, 0x11, 0x11, 0x11, 0x0F, //80 P
  0x2C, 0x1A, 0x21, 0x21, 0x21, 0x21, 0x12, 0x0C, //81 Q
  0x42, 0x22, 0x12, 0x0A, 0x1E, 0x22, 0x22, 0x1E, //82 R
  0x0E, 0x11, 0x11, 0x10, 0x0E, 0x01, 0x11, 0x0E, //83 S
  0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1F, //84 T
  0x18, 0x24, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, //85 U
  0x04, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x11, 0x11, //86 V
  0x22, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x49, //87 W
  0x21, 0x12, 0x12, 0x0C, 0x0C, 0x12, 0x12, 0x21, //88 X
  0x04, 0x04, 0x04, 0x04, 0x04, 0x0A, 0x0A, 0x11, //89 Y
  0x1F, 0x01, 0x02, 0x04, 0x04, 0x08, 0x10, 0x1F, //90 Z
  0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, //91 [
  0x04, 0x04, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, //92
  0x03, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, //93 ]
  0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x05, 0x02, //94 ^
  0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //95 _
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, //96 `
  0x0E, 0x09, 0x09, 0x0E, 0x08, 0x07, 0x00, 0x00, //97 a
  0x05, 0x0B, 0x09, 0x09, 0x0B, 0x05, 0x01, 0x01, //98 b
  0x06, 0x09, 0x01, 0x01, 0x09, 0x06, 0x00, 0x00, //99 c
  0x0A, 0x0D, 0x09, 0x09, 0x0D, 0x0A, 0x08, 0x08, //100 d
  0x06, 0x09, 0x01, 0x0F, 0x09, 0x06, 0x00, 0x00, //101 e
  0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x01, 0x03, //102 f
  0x07, 0x08, 0x0A, 0x0D, 0x09, 0x09, 0x0D, 0x0A, //103 g
  0x09, 0x09, 0x09, 0x09, 0x0B, 0x05, 0x01, 0x01, //104 h
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x01, //105 i
  0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04, //106 j
  0x24, 0x24, 0x14, 0x0C, 0x14, 0x24, 0x04, 0x04, //107 k
  0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, //108 l
  0x49, 0x49, 0x49, 0x49, 0x5B, 0x65, 0x00, 0x00, //109 m
  0x09, 0x09, 0x09, 0x09, 0x0B, 0x05, 0x00, 0x00, //110 n
  0x06, 0x09, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00, //111 o
  0x01, 0x01, 0x05, 0x0B, 0x09, 0x09, 0x0B, 0x05, //112 p
  0x08, 0x08, 0x0A, 0x0D, 0x09, 0x09, 0x0D, 0x0A, //113 q
  0x01, 0x01, 0x01, 0x01, 0x03, 0x05, 0x00, 0x00, //114 r
  0x06, 0x09, 0x04, 0x02, 0x09, 0x07, 0x00, 0x00, //115 s
  0x03, 0x01, 0x01, 0x01, 0x01, 0x03, 0x01, 0x01, //116 t
  0x0A, 0x0D, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, //117 u
  0x04, 0x0A, 0x0A, 0x0A, 0x11, 0x11, 0x00, 0x00, //118 v
  0x22, 0x55, 0x55, 0x55, 0x55, 0x49, 0x00, 0x00, //119 w
  0x11, 0x0A, 0x04, 0x04, 0x0A, 0x11, 0x00, 0x00, //120 x
  0x04, 0x04, 0x0A, 0x0A, 0x0A, 0x11, 0x00, 0x00, //121 y
  0x0F, 0x01, 0x02, 0x04, 0x08, 0x0F, 0x00, 0x00, //122 z
  0x06, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02, 0x06, //123 {
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, //124 |
  0x03, 0x02, 0x02, 0x04, 0x04, 0x02, 0x02, 0x03, //125 }
  0x00, 0x00, 0x00, 0x0D, 0x17, 0x00, 0x00, 0x00, //126 ~
};
byte smallNumber[][8] = {
  0x07, 0x05, 0x05, 0x05, 0x07, 0x00, 0x00, 0x00, //0
  0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x00, //1
  0x07, 0x01, 0x07, 0x04, 0x07, 0x00, 0x00, 0x00, //2
  0x07, 0x04, 0x06, 0x04, 0x07, 0x00, 0x00, 0x00, //3
  0x04, 0x04, 0x07, 0x05, 0x05, 0x00, 0x00, 0x00, //4
  0x07, 0x04, 0x07, 0x01, 0x07, 0x00, 0x00, 0x00, //5
  0x07, 0x05, 0x07, 0x01, 0x07, 0x00, 0x00, 0x00, //6
  0x04, 0x04, 0x04, 0x04, 0x07, 0x00, 0x00, 0x00, //7
  0x07, 0x05, 0x07, 0x05, 0x07, 0x00, 0x00, 0x00, //8
  0x07, 0x04, 0x07, 0x05, 0x07, 0x00, 0x00, 0x00, //9
};
byte Buffer_display[8][4];
void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }

  // Initialize a NTPClient to get time
  timeClient.begin();
  // Set offset time in seconds to adjust for your timezone, for example:
  // GMT +1 = 3600
  // GMT +8 = 28800
  // GMT -1 = -3600
  // GMT 0 = 0
  timeClient.setTimeOffset(7 * 60 * 60);
  for (int i = 0; i < MaxDevice; i ++) {
    lc.shutdown(i, false);
    lc.setIntensity(i, 1);
    lc.clearDisplay(i);
  }
}
void Matrix_setpx(int x, int y, char color)
{
  if (x > 31 || y > 7 || x < 0 || y < 0)return;
  if (color)Buffer_display[y][x / 8] |= (0x1 << (x % 8)); //sáng led
  else Buffer_display[y][x / 8] &= ~(0x1 << (x % 8)); //tắt led
  for (int i = 0; i < 8; i++) {
    lc.setRow(x / 8, i, Buffer_display[i][x / 8]);
  }
}
void Matrix_guikitu(unsigned char txt)
{
  int x, y;
  for (y = MatrixY; y < 8 + MatrixY; y++) // số pixel sẽ load ở trục y
  {
    for (x = MatrixX; x < Xpixel + MatrixX; x++) // số pixel sẽ load ở trục X
    {
      if ( (Font[txt - 32][y - MatrixY] & (0x1 << (x - MatrixX)))  != 0)Matrix_setpx(x, y, 1);
      else Matrix_setpx(x, y, 0);
    }
  }
  MatrixX += 5; //sau khi in xong thi tang con tro vi tri len
} 
void Matrix_guikitunho(unsigned char txt)
{
  int x, y;
  for (y = MatrixY; y < 8 + MatrixY; y++) // số pixel sẽ load ở trục y
  {
    for (x = MatrixX; x < Xpixel + MatrixX; x++) // số pixel sẽ load ở trục X
    {
      if ( (smallNumber[txt - 48][y - MatrixY] & (0x1 << (x - MatrixX)))  != 0)Matrix_setpx(x, y, 1);
      else Matrix_setpx(x, y, 0);
    }
  }
  MatrixX += 4; //sau khi in xong thi tang con tro vi tri len
}
void Matrix_guichuoi(const char *s)
{
  while (*s)
  {
    Matrix_guikitu(*s);
    s++;
  }
}
void Matrix_chonvitri(int x, int y)
{
  MatrixX = x;
  MatrixY = y;
}
void loop() {
  Matrix_chonvitri(0, 0);
  timeClient.update();
  String currentHour = String(timeClient.getHours());
  Serial.print("Hour: ");
  Serial.println(currentHour);
  if (currentHour.length() < 2) {
    currentHour = "0" + currentHour;
  }

  String currentMinute = String(timeClient.getMinutes());
  Serial.print("Minutes: ");
  Serial.println(currentMinute);
  if (currentMinute.length() < 2) {
    currentMinute = "0" + currentMinute;
  }

  String currentSecond = String(timeClient.getSeconds());
  Serial.print("Seconds: ");
  Serial.println(currentSecond);
  if ( currentSecond.length() < 2) {
    currentSecond = "0" + currentSecond;
  }
  if (currentSecond.length() < 2) {
    currentSecond = "0" + currentSecond;
  }
  for (int i = 0; i < currentHour.length(); i++) {
    Xpixel = 5;
    if (currentHour.charAt(0) == '1') {
      if (i == 0) {
        Xpixel = 4;
      }
    }
    if (currentHour.charAt(1) == '4') {
      if (i == 1) {
        Xpixel = 6;
      }
    }
    Matrix_guikitu(currentHour.charAt(i));
    MatrixX -= 1;
    if (currentHour.charAt(1) == '1') {
      if (i == 1) {
        MatrixX -= 1;
      }
    }
    if (currentHour.charAt(1) == '4') {
      if (i == 1) {
        MatrixX += 1;
      }
    }
    if (currentHour.charAt(0) != '1') {
      if (i == 0) {
        MatrixX += 1;
      }
    }
  }
  if ((unsigned long) (millis() - time1) > 1000) {
    if (OnOff) {
      Matrix_setpx(MatrixX + 1, 2, OnOff);
      Matrix_setpx(MatrixX + 1, 5, OnOff);
      OnOff = 0;
    }
    else {
      Matrix_setpx(MatrixX + 1, 2, OnOff);
      Matrix_setpx(MatrixX + 1, 5, OnOff);
      OnOff = 1;
    }
    time1 = millis();
  }

  MatrixX += 3;
  for (int i = 0; i < currentMinute.length(); i++) {
     Xpixel = 5;
    if (currentMinute.charAt(0) == '1') {
      if (i == 0) {
        Xpixel = 4;
      }
      else if (i == 1) {
        MatrixX -= 1;
      }
    }
     if(currentMinute.charAt(1) == '1'){
      if (i == 1){
        Xpixel = 4;
      }
    }
    if (currentMinute.charAt(0) == '4') {
      if (i == 0) {
        Xpixel = 6;
      }
    }
     if (currentMinute.charAt(1) == '4') {
      if (i == 1) {
        Xpixel = 6;
      }
    }
    Matrix_guikitu(currentMinute.charAt(i));
    if (currentMinute.charAt(0) == '4') {
      if (i == 0) {
        MatrixX += 1;
      }
    }
    if (currentMinute.charAt(0) == '0') {
      if (i == 0) {
        MatrixX += 1;
      }
    }
    if (currentMinute.charAt(1) == '4') {
      if (i == 1) {
        MatrixX += 1;
      }
    }
    if(currentMinute.charAt(1) == '1'){
      if (i == 1){
        MatrixX -= 1;
      }
    }
  }
  for (int i = 0; i < currentSecond.length(); i++) {
    Xpixel = 4;
    if (currentSecond.charAt(0) == '4') {
      Xpixel = 4;
    }
    if (currentSecond.charAt(0) == '1') {
      if (i == 0) {
        Xpixel = 3;
        MatrixX -= 1;
      }
      else {
        Xpixel = 5;
      }
    }
    if (currentSecond.charAt(1) == '1') {
      if (i == 1) {
        MatrixX -= 1;
      }
    }
    Matrix_guikitunho(currentSecond.charAt(i));
    if (currentSecond.charAt(0) == '1') {
      MatrixX -= 1;
    }
  }
}

void Debug() {
  Matrix_chonvitri(0, 0);
  for (int i = 0; i < 10; i++) {
    char Number[10] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
    if (i % 4 == 0) {
      Matrix_chonvitri(0, 0);
      Matrix_guichuoi("      ");
      Matrix_chonvitri(0, 0);
    }
    if (Number[i] == '2') {
      MatrixX -= 1;
    }
    if (Number[i] == '5') {
      MatrixX += 1;
    }
    Matrix_guikitu(Number[i]);
    delay(1000);
  }
}
